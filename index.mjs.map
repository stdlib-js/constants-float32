{"version":3,"file":"index.mjs","sources":["../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-read-only-property' ;\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace constants\n*/\nvar constants = {};\n\n/**\n* @name CBRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/cbrt-eps}\n*/\nimport CBRT_EPS from '@stdlib/constants-float32-cbrt-eps';\nsetReadOnly( constants, 'CBRT_EPS', CBRT_EPS );\n\n/**\n* @name EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/eps}\n*/\nimport EPS from '@stdlib/constants-float32-eps';\nsetReadOnly( constants, 'EPS', EPS );\n\n/**\n* @name EXPONENT_BIAS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/exponent-bias}\n*/\nimport EXPONENT_BIAS from '@stdlib/constants-float32-exponent-bias';\nsetReadOnly( constants, 'EXPONENT_BIAS', EXPONENT_BIAS );\n\n/**\n* @name MAX\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max}\n*/\nimport MAX from '@stdlib/constants-float32-max';\nsetReadOnly( constants, 'MAX', MAX );\n\n/**\n* @name MAX_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/max-safe-integer}\n*/\nimport MAX_SAFE_INTEGER from '@stdlib/constants-float32-max-safe-integer';\nsetReadOnly( constants, 'MAX_SAFE_INTEGER', MAX_SAFE_INTEGER );\n\n/**\n* @name MIN_SAFE_INTEGER\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/min-safe-integer}\n*/\nimport MIN_SAFE_INTEGER from '@stdlib/constants-float32-min-safe-integer';\nsetReadOnly( constants, 'MIN_SAFE_INTEGER', MIN_SAFE_INTEGER );\n\n/**\n* @name NINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/ninf}\n*/\nimport NINF from '@stdlib/constants-float32-ninf';\nsetReadOnly( constants, 'NINF', NINF );\n\n/**\n* @name NUM_BYTES\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/num-bytes}\n*/\nimport NUM_BYTES from '@stdlib/constants-float32-num-bytes';\nsetReadOnly( constants, 'NUM_BYTES', NUM_BYTES );\n\n/**\n* @name PINF\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/pinf}\n*/\nimport PINF from '@stdlib/constants-float32-pinf';\nsetReadOnly( constants, 'PINF', PINF );\n\n/**\n* @name PRECISION\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/precision}\n*/\nimport PRECISION from '@stdlib/constants-float32-precision';\nsetReadOnly( constants, 'PRECISION', PRECISION );\n\n/**\n* @name SMALLEST_NORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/smallest-normal}\n*/\nimport SMALLEST_NORMAL from '@stdlib/constants-float32-smallest-normal';\nsetReadOnly( constants, 'SMALLEST_NORMAL', SMALLEST_NORMAL );\n\n/**\n* @name SMALLEST_SUBNORMAL\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/smallest-subnormal}\n*/\nimport SMALLEST_SUBNORMAL from '@stdlib/constants-float32-smallest-subnormal';\nsetReadOnly( constants, 'SMALLEST_SUBNORMAL', SMALLEST_SUBNORMAL );\n\n/**\n* @name SQRT_EPS\n* @memberof constants\n* @readonly\n* @constant\n* @type {number}\n* @see {@link module:@stdlib/constants/float32/sqrt-eps}\n*/\nimport SQRT_EPS from '@stdlib/constants-float32-sqrt-eps';\nsetReadOnly( constants, 'SQRT_EPS', SQRT_EPS );\n\n\n// EXPORTS //\n\nexport default constants;\n"],"names":["constants","setReadOnly","CBRT_EPS","EPS","EXPONENT_BIAS","MAX","MAX_SAFE_INTEGER","MIN_SAFE_INTEGER","NINF","NUM_BYTES","PINF","PRECISION","SMALLEST_NORMAL","SMALLEST_SUBNORMAL","SQRT_EPS"],"mappings":";;i9FAoCA,IAAAA,EAAA,CAAA,EAWAC,EAAAD,EAAA,WAAAE,GAWAD,EAAAD,EAAA,MAAAG,GAWAF,EAAAD,EAAA,gBAAAI,GAWAH,EAAAD,EAAA,MAAAK,GAWAJ,EAAAD,EAAA,mBAAAM,GAWAL,EAAAD,EAAA,mBAAAO,GAWAN,EAAAD,EAAA,OAAAQ,GAWAP,EAAAD,EAAA,YAAAS,GAWAR,EAAAD,EAAA,OAAAU,GAWAT,EAAAD,EAAA,YAAAW,GAWAV,EAAAD,EAAA,kBAAAY,GAWAX,EAAAD,EAAA,qBAAAa,GAWAZ,EAAAD,EAAA,WAAAc"}